/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package itson.sistemarestaurantepresentacion.clientes;

import itson.sistemarestaurantedominio.Cliente;
import itson.sistemarestaurantenegocio.IClientesBO;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantenegocio.utilidades.EncriptadorAES;
import itson.sistemarestaurantepresentacion.Render;
import itson.sistemarestaurantepresentacion.control.Control;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author victoria
 */
public class ClientesFrecuentes extends javax.swing.JFrame {

    
    IClientesBO clientesBO;
    /**
     * Creates new form ClientesFrecuentes
     */
    public ClientesFrecuentes(IClientesBO clientesBO) {
        initComponents();
        this.clientesBO = clientesBO;
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LblClientesFrecuentes = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        btnAgregarCliente = new javax.swing.JButton();
        LblAgregarCliente = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(235, 230, 208));

        LblClientesFrecuentes.setBackground(new java.awt.Color(235, 230, 208));
        LblClientesFrecuentes.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        LblClientesFrecuentes.setForeground(new java.awt.Color(0, 0, 0));
        LblClientesFrecuentes.setText("Clientes Frecuentes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(184, Short.MAX_VALUE)
                .addComponent(LblClientesFrecuentes)
                .addGap(175, 175, 175))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(LblClientesFrecuentes)
                .addGap(39, 39, 39))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(255, 253, 211));

        btnBuscar.setBackground(new java.awt.Color(255, 255, 255));
        btnBuscar.setForeground(new java.awt.Color(0, 0, 0));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        ScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        ScrollPane.setForeground(new java.awt.Color(0, 0, 0));

        tablaClientes.setBackground(new java.awt.Color(255, 255, 255));
        tablaClientes.setForeground(new java.awt.Color(0, 0, 0));
        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Correo", "Numero Telefono", "Puntos Fidelidad"
            }
        ));
        ScrollPane.setViewportView(tablaClientes);

        btnAgregarCliente.setBackground(new java.awt.Color(0, 204, 102));
        btnAgregarCliente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnAgregarCliente.setForeground(new java.awt.Color(0, 0, 0));
        btnAgregarCliente.setText("+");
        btnAgregarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarClienteActionPerformed(evt);
            }
        });

        LblAgregarCliente.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LblAgregarCliente.setForeground(new java.awt.Color(0, 0, 0));
        LblAgregarCliente.setText("Agregar Cliente");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLimpiar)
                .addGap(156, 156, 156))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(btnAgregarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(LblAgregarCliente)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnLimpiar))
                .addGap(18, 18, 18)
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAgregarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LblAgregarCliente)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnAgregarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarClienteActionPerformed
        Control.getInstancia().abrirAgregarCliente();
        this.dispose();
    }//GEN-LAST:event_btnAgregarClienteActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        String searchQuery = btnBuscar.getText().toLowerCase();

        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tablaClientes.setRowSorter(sorter);

        if (searchQuery.trim().isEmpty()) {
            sorter.setRowFilter(null); // Mostrar todas las filas
        } else {
            sorter.setRowFilter(RowFilter.regexFilter(searchQuery)); // Filtrar filas x busqueda
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        // Limpiar tabla
        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    
    private void cargarTabla() {
        tablaClientes.setDefaultRenderer(Object.class, new Render());

        String[] columnas = new String[]{"Nombre", "Correo", "Numero Telefono", "Puntos Fidelidad", "Seleccion"};
        boolean[] editable = {false, false, false, false, true};
        Class[] types = new Class[]{java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class};

        DefaultTableModel mModel = new DefaultTableModel(columnas, 0) {
            @Override
            public Class getColumnClass(int i) {
                return types[i];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return editable[column];
            }
        };

        mModel.setRowCount(0);
        Object[] datos = new Object[columnas.length];
        try {
            String filtroBusqueda = "";
            List<Cliente> clientes = this.clientesBO.consultar(filtroBusqueda);
            for (Cliente cliente : clientes) {
                String nombreCompleto = cliente.getNombre() + " " + cliente.getApellidoPaterno();
                if (cliente.getApellidoMaterno() != null && !cliente.getApellidoMaterno().isEmpty()) {
                    nombreCompleto += " " + cliente.getApellidoMaterno();
                }

                // Desencriptar el número de teléfono
                String numeroTelefonoDesencriptado;
                try {
                    numeroTelefonoDesencriptado = EncriptadorAES.desencriptar(cliente.getNumeroTelefono());
                } catch (Exception ex) {
                    numeroTelefonoDesencriptado = "Error al desencriptar";
                    System.err.println("Error al desencriptar el número de teléfono: " + ex.getMessage());
                }

                datos[0] = nombreCompleto;
                datos[1] = cliente.getCorreo();
                datos[2] = numeroTelefonoDesencriptado; // Mostrar el número desencriptado
                datos[3] = cliente.getPuntosFidelidad();
                datos[4] = false;

                mModel.addRow(datos);
            }

            tablaClientes.setModel(mModel);
            
            // Implementar un listener para cambiar el estado del checkbox
            tablaClientes.getModel().addTableModelListener(e -> {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    if (column == 4) {  // Si la columna seleccionada es la de los checkboxes (índice 4)
                        boolean selected = (boolean) mModel.getValueAt(row, column);
                        // Si el checkbox de esa fila se seleccionó, desmarcar los demás
                        if (selected) {
                            for (int i = 0; i < mModel.getRowCount(); i++) {
                                if (i != row) {
                                    mModel.setValueAt(false, i, 4);  // Desmarcar las otras filas
                                }
                            }
                        }
                    }
                }
            });
           } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LblAgregarCliente;
    private javax.swing.JLabel LblClientesFrecuentes;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton btnAgregarCliente;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable tablaClientes;
    // End of variables declaration//GEN-END:variables
}
