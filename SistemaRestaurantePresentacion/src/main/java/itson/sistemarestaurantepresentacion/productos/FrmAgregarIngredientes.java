/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package itson.sistemarestaurantepresentacion.productos;

import itson.sistemarestaurantedominio.Producto;
import itson.sistemarestaurantedominio.dtos.NuevaRelacionIngredienteProductoDTO;
import itson.sistemarestaurantedominio.dtos.NuevoIngredienteDTO;
import itson.sistemarestaurantenegocio.IIngredientesProductosBO;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantepersistencia.excepciones.PersistenciaException;
import itson.sistemarestaurantepresentacion.control.Control;
import itson.sistemarestaurantepresentacion.observers.IngredienteSeleccionadoObserver;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author juanpheras
 */
public class FrmAgregarIngredientes extends javax.swing.JFrame implements IngredienteSeleccionadoObserver{

    
    DefaultTableModel modeloTabla;
    
    Producto producto;

    IIngredientesProductosBO ingredientesProductosBO;

    /**
     * Lista de los ingredientes que se van añadiendo para poder relacionarlos
     * posteriormente.
     */
    List<NuevoIngredienteDTO> ingredientesProducto = new ArrayList();
    /**
     * Creates new form frmAgregarClientes
     * @param producto
     */
    public FrmAgregarIngredientes(Producto producto, IIngredientesProductosBO ingredientesProductosBO) {
        initComponents();
        this.producto = producto;
        this.nombreLbl.setText(producto.getNombre());
        this.modeloTabla = (DefaultTableModel) tablaIngredientes.getModel();
        modeloTabla.setRowCount(0);
        this.ingredientesProductosBO = ingredientesProductosBO;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nombreLbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();
        botonBuscarIngredientes = new javax.swing.JButton();
        botonRegistrar = new javax.swing.JButton();
        botonLimpiar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nombreLbl.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        nombreLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nombreLbl.setText("Nombre del producto");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nuevos ingredientes para:");

        tablaIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cantidad", "Producto añadido", "Unidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaIngredientes);

        botonBuscarIngredientes.setText("Buscar Ingredientes");
        botonBuscarIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarIngredientesActionPerformed(evt);
            }
        });

        botonRegistrar.setText("Registrar nuevos ingredientes");
        botonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarActionPerformed(evt);
            }
        });

        botonLimpiar.setText("Limpiar tabla");
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(botonBuscarIngredientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(nombreLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonRegistrar)))
                .addGap(16, 16, 16))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel2)
                    .addContainerGap(327, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCancelar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(nombreLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonBuscarIngredientes)
                            .addComponent(botonLimpiar))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel2)
                    .addContainerGap(359, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonBuscarIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarIngredientesActionPerformed
        Control.getInstancia().abrirBuscadorIngredientes(this);
    }//GEN-LAST:event_botonBuscarIngredientesActionPerformed

    private void botonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarActionPerformed
        if (tablaIngredientes.isEditing()) { //Con esto nos aseguramos que no se quede en el valor pasado
            // Detén la edición y aplica los cambios
            TableCellEditor editor = tablaIngredientes.getCellEditor();
            editor.stopCellEditing();
        }
        if (this.registrarRelaciones()) {
            this.dispose();
        }
    }//GEN-LAST:event_botonRegistrarActionPerformed

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaIngredientes.getModel();
        modeloTabla.setRowCount(0);
        ingredientesProducto.clear();  // Limpia la lista de ingredientes
    }//GEN-LAST:event_botonLimpiarActionPerformed

    /**
     * Método que se encarga de reccorer la tabla de ingredienes para asociarla
     * al producto y crear sus relaciones.
     */
    private boolean registrarRelaciones() {
        if (ingredientesProducto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No puedes registrar con ingredientes vacios");
        } else {
            //Lista para agregar las relaciones
            List<NuevaRelacionIngredienteProductoDTO> relaciones = new ArrayList<>();

            boolean huboError = false;

            for (int i = 0; i < ingredientesProducto.size(); i++) {
                //Obtenemos el ingrediente de la posicion i
                NuevoIngredienteDTO ingrediente = ingredientesProducto.get(i);

                NuevaRelacionIngredienteProductoDTO relacion = new NuevaRelacionIngredienteProductoDTO();
                relacion.setIdIngrediente(ingrediente.getId());
                relacion.setIdProducto(producto.getId());

                //Obtenemos la cantidad 
                String cantidadStr = tablaIngredientes.getValueAt(i, 0).toString();

                try {
                    Integer cantidad = Integer.parseInt(cantidadStr);
                    relacion.setCantidad(cantidad);
                    relaciones.add(relacion);
                    if (cantidad == 0) {
                        huboError = true;
                        break;
                    }

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "No puedes añadir letras o decimales en cantidad.");
                    huboError = true;
                    break;
                }

            }

            //Si no hubo algun error se procede a registrar todas las relaciones
            if (!huboError) {
                for (NuevaRelacionIngredienteProductoDTO relacion : relaciones) {
                    try {
                        ingredientesProductosBO.registrarRelacion(relacion);
                    } catch (NegocioException | PersistenciaException e) {
                        JOptionPane.showMessageDialog(this, "Error al registrar relación: " + e.getMessage());
                    }
                }
                JOptionPane.showMessageDialog(this, "Relaciones registradas con éxito.");
                return true;
            }

        }
        return false;
    }
    
    /**
     * Método que se invoca automáticamente cuando se selecciona un ingrediente
     * desde la pantalla del buscadorIngredientes. El método agrega el
     * ingrediente a la tabla.
     *
     * @param ingrediente El ingrediente seleccionadao y notificado por el
     * buscador.
     */
    @Override
    public void ingredienteSeleccionado(NuevoIngredienteDTO ingrediente) {
        actualizarTablaConIngrediente(ingrediente);
        ingredientesProducto.add(ingrediente);
    }

    /**
     * Método que cuando se seleccina un ingrediente del buscador lo agrega a la
     * tabla.
     *
     * @param ingrediente el ingrediente el cual se añadira a la tabla
     */
    private void actualizarTablaConIngrediente(NuevoIngredienteDTO ingrediente) {
        
        Object[] fila = {
            0,
            ingrediente.getNombre(),
            ingrediente.getUnidadMedida()
        };
        modeloTabla.addRow(fila);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscarIngredientes;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JButton botonRegistrar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nombreLbl;
    private javax.swing.JTable tablaIngredientes;
    // End of variables declaration//GEN-END:variables



}
