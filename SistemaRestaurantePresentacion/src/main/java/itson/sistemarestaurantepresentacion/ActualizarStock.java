package itson.sistemarestaurantepresentacion;

import com.google.protobuf.Field;
import itson.sistemarestaurantedominio.Ingrediente;
import itson.sistemarestaurantedominio.UnidadMedida;
import itson.sistemarestaurantedominio.dtos.ActualizarStockIngredienteDTO;
import itson.sistemarestaurantedominio.dtos.NuevoIngredienteDTO;
import itson.sistemarestaurantenegocio.IIngredientesBO;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantepresentacion.control.Control;
import itson.sistemarestaurantepresentacion.observers.IngredienteSeleccionadoObserver;
import java.util.List;
import java.util.logging.Logger;
import javax.persistence.PersistenceException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pedro Morales Esquer, Juan Pablo Heras Carrazco, Victoria Valenzuela
 * Sooto
 */
public class ActualizarStock extends javax.swing.JFrame implements IngredienteSeleccionadoObserver {

    /**
     * Creates new form Productos
     */
    private Long idIngrediente;
    private IIngredientesBO ingredientesBO;
    private static final Logger LOG = Logger.getLogger(BuscadorIngredientes.class.getName());

    public ActualizarStock(IIngredientesBO ingredientesBO) {
        initComponents();
        this.setTitle("Ingredientes");
        this.setResizable(false);
        this.setSize(760, 500);
        this.setLocationRelativeTo(null);
        this.ingredientesBO = ingredientesBO;
        this.llenarTablaIngredientes();
    }

    private void llenarTablaIngredientes() {
        try {

            List<Ingrediente> ingredientes = this.ingredientesBO.consultar("");
            //Este objeto permite interactuar con los elementos de la tabla
            DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaIngredientes.getModel();
            modeloTabla.setRowCount(0);
            for (Ingrediente ingrediente : ingredientes) {
                Object[] fila = {
                    ingrediente.getId(),
                    ingrediente.getNombre(),
                    ingrediente.getUnidadMedida(),
                    ingrediente.getStock()
                };
                modeloTabla.addRow(fila);
            }

        } catch (NegocioException ex) {
            LOG.severe("No se pudo llenar la tabla");
            JOptionPane.showInputDialog(this, ex.getMessage());
        }
    }

    public void actualizarIngredientesSeleccionados(NuevoIngredienteDTO ingredienteSeleccionado) {
        try {
            // Este objeto permite interactuar con los elementos de la tabla
            DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaIngredientes.getModel();
            modeloTabla.setRowCount(0); // Limpiamos la tabla antes de llenarla nuevamente

            // Llenamos la tabla con los ingredientes seleccionados
            Object[] fila = {
                ingredienteSeleccionado.getId(),
                ingredienteSeleccionado.getNombre(),
                ingredienteSeleccionado.getUnidadMedida(),
                ingredienteSeleccionado.getStock()
            };
            modeloTabla.addRow(fila);

            lblStockActualNumero.setText(String.valueOf(ingredienteSeleccionado.getStock()));

            this.idIngrediente = ingredienteSeleccionado.getId();

        } catch (Exception ex) {
            LOG.severe("No se pudo actualizar la tabla con los ingredientes seleccionados");
            JOptionPane.showInputDialog(this, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        panelGeneral = new javax.swing.JPanel();
        panelSuperior = new javax.swing.JPanel();
        lblTituloIngrediente = new javax.swing.JLabel();
        iconChefSoft = new javax.swing.JLabel();
        iconIngrediente = new javax.swing.JLabel();
        pnlTablaProductos = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();
        iconBuscar = new javax.swing.JLabel();
        lblStockActual = new javax.swing.JLabel();
        campoStock = new javax.swing.JTextField();
        lblStockActualizar = new javax.swing.JLabel();
        lblStockActualMostrar = new javax.swing.JLabel();
        btnActualizar = new javax.swing.JButton();
        lblStockActualNumero = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelGeneral.setBackground(new java.awt.Color(255, 253, 211));

        panelSuperior.setBackground(new java.awt.Color(235, 230, 208));

        lblTituloIngrediente.setFont(new java.awt.Font("Helvetica Neue", 0, 64)); // NOI18N
        lblTituloIngrediente.setText("Ingredientes");

        iconChefSoft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logoPequenioStroke.png"))); // NOI18N

        iconIngrediente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ingredientesIcon.png"))); // NOI18N

        javax.swing.GroupLayout panelSuperiorLayout = new javax.swing.GroupLayout(panelSuperior);
        panelSuperior.setLayout(panelSuperiorLayout);
        panelSuperiorLayout.setHorizontalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconChefSoft)
                .addGap(117, 117, 117)
                .addComponent(lblTituloIngrediente)
                .addGap(83, 83, 83)
                .addComponent(iconIngrediente)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSuperiorLayout.setVerticalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSuperiorLayout.createSequentialGroup()
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblTituloIngrediente))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSuperiorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(iconChefSoft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(iconIngrediente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tablaIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ingrediente", "Unidad de Medida", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaIngredientes.setColumnSelectionAllowed(true);
        pnlTablaProductos.setViewportView(tablaIngredientes);

        lblStockActual.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        lblStockActual.setText("Stock actual:");

        campoStock.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N

        lblStockActualizar.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        lblStockActualizar.setText("Stock a actualizar:");

        lblStockActualMostrar.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        lblStockActualNumero.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        lblStockActualNumero.setText("-");

        javax.swing.GroupLayout panelGeneralLayout = new javax.swing.GroupLayout(panelGeneral);
        panelGeneral.setLayout(panelGeneralLayout);
        panelGeneralLayout.setHorizontalGroup(
            panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSuperior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelGeneralLayout.createSequentialGroup()
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(lblStockActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(campoStock, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124)
                        .addComponent(iconBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(lblStockActual)
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelGeneralLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(lblStockActualMostrar))
                            .addGroup(panelGeneralLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblStockActualNumero))))
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addGap(366, 366, 366)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(pnlTablaProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelGeneralLayout.setVerticalGroup(
            panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGeneralLayout.createSequentialGroup()
                .addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlTablaProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(lblStockActualMostrar)
                .addGap(35, 35, 35)
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStockActual)
                            .addComponent(lblStockActualNumero))
                        .addGap(18, 18, 18)
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStockActualizar)
                            .addComponent(campoStock, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addComponent(iconBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActualizar)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            Integer stock = Integer.valueOf(this.campoStock.getText());
            ActualizarStockIngredienteDTO ingredienteNuevoStock = new ActualizarStockIngredienteDTO(idIngrediente, stock);
            this.ingredientesBO.actualizar(ingredienteNuevoStock);
            JOptionPane.showMessageDialog(this, "Exito al actualizar el stock del ingrediente", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        } catch (NegocioException e) {
            LOG.severe("No fue posible actualizar el stock del ingrediente " + e.getMessage());
            JOptionPane.showMessageDialog(this, e.getMessage(), "Informacion", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            LOG.severe("No puedes ingresar letras en el stock");
            JOptionPane.showMessageDialog(this, "Asegurate que el stock sean solo números", "Informacion", JOptionPane.INFORMATION_MESSAGE);

        }
        this.dispose();
        Control.getInstancia().abrirActualizarIngredientes();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JTextField campoStock;
    private javax.swing.JLabel iconBuscar;
    private javax.swing.JLabel iconChefSoft;
    private javax.swing.JLabel iconIngrediente;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblStockActual;
    private javax.swing.JLabel lblStockActualMostrar;
    private javax.swing.JLabel lblStockActualNumero;
    private javax.swing.JLabel lblStockActualizar;
    private javax.swing.JLabel lblTituloIngrediente;
    private javax.swing.JPanel panelGeneral;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JScrollPane pnlTablaProductos;
    private javax.swing.JTable tablaIngredientes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void ingredienteSeleccionado(NuevoIngredienteDTO ingrediente) {
        actualizarIngredientesSeleccionados(ingrediente);
    }
}
