/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package itson.sistemarestaurantepresentacion;

import itson.sistemarestaurantedominio.Producto;
import itson.sistemarestaurantedominio.dtos.ActualizarIngredienteProductoDTO;
import itson.sistemarestaurantedominio.dtos.DetalleIngredienteProductoDTO;
import itson.sistemarestaurantedominio.dtos.NuevoIngredienteDTO;
import itson.sistemarestaurantenegocio.IIngredientesProductosBO;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantepersistencia.excepciones.PersistenciaException;
import itson.sistemarestaurantepresentacion.control.Control;
import itson.sistemarestaurantepresentacion.observers.IngredienteSeleccionadoObserver;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author juanpheras
 */
public class ActualizarProducto extends javax.swing.JFrame {

    private Producto productoActualizar;
    private IIngredientesProductosBO ingredientesProductoBO;

    /**
     * Creates new form ActualizarProducto
     *
     * @param productoActualizar el Producto que se actualizará
     * @param ingredientesProductoBO ingredientesProductoBO para poder tener los
     * métodos.
     */
    public ActualizarProducto(Producto productoActualizar, IIngredientesProductosBO ingredientesProductoBO) {
        initComponents();
        this.setTitle("ActualizarProductos");
        this.setResizable(false);
        this.setSize(770, 510);
        this.setLocationRelativeTo(null);
        this.productoActualizar = productoActualizar;
        this.ingredientesProductoBO = ingredientesProductoBO;
        try {
            llenarDetallesProducto();
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar el producto");
            Control.getInstancia().abrirMenuAdministrador();
            this.dispose();
            Logger.getLogger(ActualizarProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        botonActualizarProducto = new javax.swing.JButton();
        pnlTablaProductos = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        botonAñadirIngrediente = new javax.swing.JButton();
        NombreProductoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 253, 211));

        jPanel2.setBackground(new java.awt.Color(235, 230, 208));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 64)); // NOI18N
        jLabel1.setText("Productos");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logoPequenioStroke.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/platilloIcon.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(111, 111, 111)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(672, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(16, 16, 16)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        botonActualizarProducto.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        botonActualizarProducto.setText("Aceptar cambios");
        botonActualizarProducto.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonActualizarProducto.setOpaque(true);
        botonActualizarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarProductoActionPerformed(evt);
            }
        });

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ingrediente", "Unidad medida", "Cantidad", "Nueva Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProductos.setColumnSelectionAllowed(true);
        pnlTablaProductos.setViewportView(tablaProductos);
        tablaProductos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        botonAñadirIngrediente.setBackground(new java.awt.Color(0, 204, 0));
        botonAñadirIngrediente.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        botonAñadirIngrediente.setText("Añadir ingrediente");
        botonAñadirIngrediente.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonAñadirIngrediente.setOpaque(true);
        botonAñadirIngrediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirIngredienteActionPerformed(evt);
            }
        });

        NombreProductoLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        NombreProductoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreProductoLabel.setText("NombreProducto");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(botonAñadirIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(NombreProductoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(544, 544, 544)))
                        .addGap(6, 6, 6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(pnlTablaProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonActualizarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NombreProductoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlTablaProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonActualizarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(botonAñadirIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cuando se cierra la ventana se actualiza con los nuevos ingredientes
     *
     * @param evt
     */
    private void botonAñadirIngredienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirIngredienteActionPerformed
        JFrame formsAgregarIngredientes = Control.getInstancia().abrirFrameAgregarIngredientes(productoActualizar);
        formsAgregarIngredientes.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                // Cuando el frame se cierre, ejecutar llenarDetallesProducto()
                try {
                    llenarDetallesProducto();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        });
        try {
            llenarDetallesProducto();
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_botonAñadirIngredienteActionPerformed

    private void botonActualizarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarProductoActionPerformed
        // TODO add your handling code here:
        if (tablaProductos.isEditing()) { //Con esto nos aseguramos que no se quede en el valor pasado
            // Detén la edición y aplica los cambios
            TableCellEditor editor = tablaProductos.getCellEditor();
            editor.stopCellEditing();
        }
        try {
            if (this.actualizarCambios()) {
                Control.getInstancia().abrirMenuAdministrador();
                this.dispose();
            }
        } catch (NegocioException ex) {
            Logger.getLogger(ActualizarProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonActualizarProductoActionPerformed

    /**
     * Llenamos la tabla de detalles producto.
     *
     * @throws NegocioException
     */
    private void llenarDetallesProducto() throws NegocioException {
        this.NombreProductoLabel.setText(productoActualizar.getNombre());
        List<DetalleIngredienteProductoDTO> ingredientesDTO = this.ingredientesProductoBO.consultarIngredientesProducto(
                productoActualizar.getId());
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaProductos.getModel();
        modeloTabla.setRowCount(0);

        for (DetalleIngredienteProductoDTO ingredienteProductoDTO : ingredientesDTO) {
            Object[] fila = {
                productoActualizar.getId(),
                ingredienteProductoDTO.getNombre(),
                ingredienteProductoDTO.getUnidadMedida(),
                ingredienteProductoDTO.getCantidad(),
                ingredienteProductoDTO.getCantidad()
            };
            modeloTabla.addRow(fila);
        }
    }

    private boolean actualizarCambios() throws NegocioException {
        List<DetalleIngredienteProductoDTO> ingredientesDTO = this.ingredientesProductoBO.consultarIngredientesProducto(
                productoActualizar.getId());

        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaProductos.getModel();
        
         boolean huboError = false; //Variable booleana para verificar si hubo algun error anter de actualizar los cambios

        List<ActualizarIngredienteProductoDTO> productosActualizar = new ArrayList();
        //Recorremos la tabla para actualizar las señales
        for (int i = 0; i < modeloTabla.getRowCount(); i++) {
            // Obtenemos el valor de la "Nueva Cantidad" de la tabla (columna 4)
            Object nuevaCantidadObj = modeloTabla.getValueAt(i, 4);

            // Asegurarnos de que el valor no sea nulo y convertirlo a tipo adecuado
            if (nuevaCantidadObj != null) {
                try {
                    Integer nuevaCantidad = Integer.parseInt(nuevaCantidadObj.toString());
                    // Obtener el DTO correspondiente al ingrediente en la fila i
                    DetalleIngredienteProductoDTO ingredienteDTO = ingredientesDTO.get(i);

                    // Crear un DTO para actualizar, con la nueva cantidad
                    ActualizarIngredienteProductoDTO actualizarIngredienteDTO = new ActualizarIngredienteProductoDTO(
                            ingredienteDTO.getId(), 
                            nuevaCantidad);
                    if(nuevaCantidad == 0){
                        huboError = true;
                        break;
                    }
                    productosActualizar.add(actualizarIngredienteDTO);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "No puedes añadir letras.");
                    huboError = true;
                    break;
                }

            }
        }
        //Si no hubo algun error se procede a registrar todas las relaciones
            if (!huboError) {
                for (ActualizarIngredienteProductoDTO relacion : productosActualizar) {
                    try {
                        ingredientesProductoBO.actualizar(relacion);
                    } catch (NegocioException | PersistenciaException e) {
                        JOptionPane.showMessageDialog(this, "Error al registrar relación: " + e.getMessage());
                    }
                }
                JOptionPane.showMessageDialog(this, "Relaciones registradas con éxito.");
                return true;
            }
            JOptionPane.showMessageDialog(this, "No se pudo actualizat checa tu codigo bro");
            return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NombreProductoLabel;
    private javax.swing.JButton botonActualizarProducto;
    private javax.swing.JButton botonAñadirIngrediente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane pnlTablaProductos;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables

}
